import tensorflow as tf
import os
import cv2
import imghdr
import numpy as np
from matplotlib import pyplot as plt

from google.colab import drive
drive.mount('/content/drive')

raw_data = tf.keras.utils.image_dataset_from_directory('/content/drive/MyDrive/Data', image_size=(150, 100))

normalize_data = raw_data.map(lambda x,y : (x/255, tf.one_hot(y, depth=4)))

train_size = int(len(normalize_data) * 0.7)
val_size = int(len(normalize_data) * 0.3) + 1

train_data = normalize_data.take(train_size)
val_data = normalize_data.skip(train_size).take(val_size)

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dense, Flatten, Dropout

model = Sequential()

model.add(Conv2D(filters=16, kernel_size=2, padding='same', activation='relu', input_shape=(150, 100, 3)))
model.add(MaxPooling2D(pool_size=2))

model.add(Conv2D(filters=32, kernel_size=2, padding='same', activation='relu'))
model.add(MaxPooling2D(pool_size=2))

model.add(Conv2D(filters=64, kernel_size=2, padding='same', activation='relu'))
model.add(MaxPooling2D(pool_size=2))

model.add(Conv2D(filters=32, kernel_size=2, padding='same', activation='relu'))
model.add(MaxPooling2D(pool_size=2))

model.add(Dropout(0.3))

model.add(Flatten())

model.add(Dense(500, activation='relu'))

model.add(Dense(4, activation='softmax'))

model.compile(optimizer='Adam', loss='categorical_crossentropy', metrics=['accuracy'])

model.summary()

history = model.fit(train_data, epochs=20, validation_data=val_data)

fig = plt.figure()

plt.plot(history.history['accuracy'], color='green', label='Training Accuracy')
plt.plot(history.history['val_accuracy'], color='orange', label='Validation Accuracy')

fig.suptitle('Accuracy', fontsize=10)

plt.legend(loc='lower right')
plt.show()

fig = plt.figure()

plt.plot(history.history['loss'], color='red', label='Training Loss')
plt.plot(history.history['val_loss'], color='orange', label='Validation Loss')

fig.suptitle('Loss', fontsize=10)

plt.legend(loc='upper left')
plt.show()

image = cv2.imread('/content/drive/MyDrive/Data/Limon Hasta/0022_0005.JPG')
image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

resized_image = tf.image.resize(image, (150, 100))

prediction = model.predict(np.expand_dims(resized_image/255, 0))

raw_data.class_names[prediction.argmax()]
